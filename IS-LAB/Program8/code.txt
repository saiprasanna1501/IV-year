import java.math.*;

public class RSA {
public static void main(String args[]) {
int p,q;
p = 3;
q = 11;
int msg = 121;
int n = p * q;
int e;
int z = (p-1) * (q-1);
System.out.println("z:"+z);
for(e = 2;e < z;e++) {
if(gcd(e,z) == 1) {
break;
}
}
int x,d = 0;
System.out.println("e:"+e);
for(int i = 0;i <= 9;i++) {
x = (1 + (i*z));
if(x % e == 0) {
d = x / e;
break;
}
}
System.out.println("d:"+d);
double c = Math.pow(msg, e) % n;
System.out.println("Encrypted Message:"+c);

BigInteger N = BigInteger.valueOf(n);
BigInteger C = BigDecimal.valueOf(c).toBigInteger();
BigInteger msgback = (C.pow(d)).mod(N);
System.out.println("Decrypted Message:"+msgback);
}
private static int gcd(int e, int z) {
// TODO Auto-generated method stub
if(e == 0)
return z;
else
return gcd(z % e,e);
}

}

